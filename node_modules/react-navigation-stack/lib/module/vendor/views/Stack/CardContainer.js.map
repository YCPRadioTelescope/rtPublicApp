{"version":3,"sources":["CardContainer.tsx"],"names":["React","View","StyleSheet","Platform","Card","HeaderHeightContext","useTheme","EPSILON","CardContainer","active","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousRoute","getFocusedRoute","headerMode","headerShown","headerStyleInterpolator","headerTransparent","headerHeight","onHeaderHeightChange","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onTransitionEnd","onTransitionStart","previousScene","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","useEffect","handleOpen","route","handleClose","handleTransitionStart","insets","top","right","bottom","left","colors","useState","pointerEvents","setPointerEvents","OS","valueListenerCallback","value","listener","progress","next","addListener","removeListener","current","marginTop","backgroundColor","background","absoluteFill","styles","container","mode","scenes","styleInterpolator","onContentHeightChange","memo","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  Platform,\n} from 'react-native';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport useTheme from '../../../utils/useTheme';\nimport {\n  Route,\n  Scene,\n  Layout,\n  StackHeaderMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  previousScene?: Scene<Route<string>>;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  headerMode: StackHeaderMode;\n  headerShown?: boolean;\n  headerTransparent?: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousRoute,\n  getFocusedRoute,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  headerTransparent,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onTransitionEnd,\n  onTransitionStart,\n  previousScene,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    if (Platform.OS === 'web') {\n      return;\n    }\n    const valueListenerCallback = ({ value }: { value: number }) => {\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    };\n    // @ts-ignore\n    const listener = scene.progress.next?.addListener(valueListenerCallback);\n    return () => {\n      if (listener) {\n        // @ts-ignore\n        scene.progress.next?.removeListener(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={onPageChangeStart}\n      onGestureCanceled={onPageChangeCancel}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      containerStyle={\n        headerMode === 'float' && !headerTransparent && headerShown !== false\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle] as any}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <HeaderHeightContext.Provider value={headerHeight}>\n            {renderScene({ route: scene.route })}\n          </HeaderHeightContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousRoute,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]}